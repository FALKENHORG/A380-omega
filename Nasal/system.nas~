# A380 systems
# S.Hamilton and N.Muraleedharan
# NOTE - I've removed a lot of the older instrument based code as I've made new instruments with their own scripts. ~Naru

aircraft.livery.init("Aircraft/A380/XML/Liveries");

strobe_switch = props.globals.getNode("/controls/switches/strobe", 0);
aircraft.light.new("sim/model/A380/lighting/strobe", [0.05, 1.2], strobe_switch);
beacon_switch = props.globals.getNode("/controls/lighting/beacon", 0);
aircraft.light.new("sim/model/A380/lighting/beacon", [0.05, 1.25], beacon_switch);

init_controls = func {
  setprop("/engines/engine[4]/off-start-run",0);     # APU state, 0=OFF, 1=START, 2=RUN
  setprop("/controls/engines/engine[0]/master",0);
  setprop("/controls/engines/engine[1]/master",0);
  setprop("/controls/engines/engine[2]/master",0);
  setprop("/controls/engines/engine[3]/master",0);
  setprop("/controls/engines/engine[0]/thrust-lever",0);
  setprop("/controls/engines/engine[1]/thrust-lever",0);
  setprop("/controls/engines/engine[2]/thrust-lever",0);
  setprop("/controls/engines/engine[3]/thrust-lever",0);
  setprop("/environment/turbulence/use-cloud-turbulence","true");
  setprop("/sim/current-view/field-of-view",60.0);
  setprop("/sim/view[101]/enabled", 0);
  setprop("/sim/view[103]/enabled", 0);
  setprop("/controls/gear/brake-parking",1.0);
  setprop("/controls/engines/ign-start",0);        # the IGN start switch on the OH
  setprop("/controls/APU/run",0);                  # what should we do with the APU (engine[4])
  setprop("/systems/electrical/apu-test",0);
  setprop("/instrumentation/annunciator/master-caution",0.0);
  setprop("/instrumentation/switches/seat-belt-sign",0.0);
  setprop("/surface-positions/speedbrake-pos-norm",0.0);
  setprop("/instrumentation/wxradar/display-mode",2);   #is 'arc'
  setprop("/velocities/vls-factor", 1.23);

  #payload - Crew, PAX, Cargo
  setprop("/fdm/jsbsim/inertia/pointmass-weight-lbs[0]",350);
  setprop("/fdm/jsbsim/inertia/pointmass-weight-lbs[1]",48420);
  setprop("/fdm/jsbsim/inertia/pointmass-weight-lbs[2]",28350);
  setprop("/fdm/jsbsim/inertia/pointmass-weight-lbs[3]",21000);
  setprop("/fdm/jsbsim/inertia/pointmass-weight-lbs[4]",14328);
  setprop("/fdm/jsbsim/inertia/pointmass-weight-lbs[5]",1200);

  setprop("/systems/electrical/apu-test",0);
}
# UPDATE ENGINES
update_engines = func {

  # update engine data and start engines
  var totalFuel = 0;
  for(e=0; e < 4; e=e+1) {
    ign = getprop("/controls/engines/ign-start");
    e_start  = getprop("/controls/engines/engine["~e~"]/starter");
    e_master = getprop("/controls/engines/engine["~e~"]/master");
    e_ign    = getprop("/controls/engines/engine["~e~"]/ignition");
    e_fu_kg  = getprop("fdm/jsbsim/propulsion/engine["~e~"]/fuel-used-kg");
    totalFuel = totalFuel+e_fu_kg;
    hpsi     = getprop("/engines/engine["~e~"]/n2");
    if(hpsi == nil){
      hpsi =0.0;
    }
    if(hpsi > 30.0){
      setprop("/systems/hydraulic/pump-psi["~e~"]",60.0);
    }else{
      setprop("/systems/hydraulic/pump-psi["~e~"]",hpsi * 2);
    }
    
    if (ign == 1 and e_start == 1 and e_master == 1) {
      if (hpsi > 20 and hpsi < 22 and getprop("/controls/engines/engine["~e~"]/cutoff") == 1) {
        setprop("/controls/engines/engine["~e~"]/cutoff",0);
      }
      if (hpsi >= 26 and hpsi < 50) {
        setprop("/controls/engines/engine["~e~"]/ignition",1);
        #setprop("/controls/engines/engine["~e~"]/starter",0);
      }
    }
    if (hpsi >= 50 and ign == 1 and e_ign == 1) {
         setprop("/controls/engines/engine["~e~"]/ignition",0);
         setprop("/controls/engines/engine["~e~"]/generator",1);
         settimer(check_all_start, 10);
    }
    if (hpsi > 55) {
      if (getprop("/controls/pneumatic/engine["~e~"]/bleed") == 0) {
        setprop("/controls/pneumatic/engine["~e~"]/bleed",1);
      }
    } else {
      if (getprop("/controls/pneumatic/engine["~e~"]/bleed") == 1) {
        setprop("/controls/pneumatic/engine["~e~"]/bleed",0);
      }
    }
    ##var eng_egtF = getprop("/engines/engine["~e~"]/egt_degf");
    var eng_egtF = getprop("/engines/engine["~e~"]/egt-degf");
    eng_egtC = (5/9)*(eng_egtF-32);
    setprop("/engines/engine["~e~"]/egt_degc",eng_egtC);
    limit = getprop("/instrumentation/ecam/egt_limit_arm");
    if (eng_egtC > 920 and limit != 1) {
      settimer(check_egt_overlimit, 20);
      setprop("/instrumentation/ecam/egt_limit_arm",1);
    }
  }
  setprop("consumables/fuel/total-used-kg",totalFuel);

  ### APU stuff 
  var apuN1 = getprop("/engines/engine[4]/n1");
  var hz = apuN1*20;
  setprop("/engines/engine[4]/gena-hz", hz);
  setprop("/engines/engine[4]/genb-hz", hz);
  # update APU status and start/stop APU  
  apu_state = getprop("/engines/engine[4]/off-start-run");
  if (apu_state == 1) {
    start_apu();
  }
  if (apu_state == 2 and getprop("/engines/engine[4]/cutoff") == 1 and getprop("/engines/engine[4]/n2") < 50) {
    setprop("/engines/engine[4]/off-start-run",0);
    settimer(update_sd, 10);
  }
  var apuN2 = getprop("/engines/engine[4]/n2");
  if (apuN2 == nil) {
    apuN2 = 0.0;
  }
  if (apuN2 > 50) {
    if (getprop("/controls/pneumatic/APU-bleed") == 0) {
      setprop("/controls/pneumatic/APU-bleed",1);
    }
  } else {
    if (getprop("/controls/pneumatic/APU-bleed") == 1) {
      setprop("/controls/pneumatic/APU-bleed",0);
    }
  }
  var apu_egtF = getprop("/engines/engine[4]/egt-degf");
  apu_egtC = (5/9)*(apu_egtF-32);
  setprop("/engines/engine[4]/egt_degc",apu_egtC);

  # Set APU Start Indicator Light property
  if(apu_state == 0) { # OFF
  	setprop("/controls/APU/start-indicator", 0);
  } elsif (apu_state == 1) { # STARTING
  	setprop("/controls/APU/start-indicator", 1);
  } else { # AVAIL
  	if(getprop("/controls/APU/start") == 1) {
  		setprop("/controls/APU/start-indicator", 2);
  	} else {
  		setprop("/controls/APU/start-indicator", 3);
  	}
  }

  # update status of WOW so we only get 1 event in the listener
  wow = getprop("/instrumentation/gear/wow");
  wow1 = getprop("/gear/gear[1]/wow");
  wow2 = getprop("/gear/gear[2]/wow");
  if ((wow1 != wow) or (wow2 != wow)) {
    if (wow1 != wow) {
      setprop("/instrumentation/gear/wow",wow1);
    } else {
      setprop("/instrumentation/gear/wow",wow2);
    }
  }

  settimer(update_engines, 0.60);  
}


##
#
check_egt_overlimit = func {
   limit = getprop("/instrumentation/ecam/egt_overlimit");
   for(e=0; e < 4; e=e+1) {
     egt_degC = getprop("/engines/engine["~e~"]/egt_degc");
     if (egt_degC > 920 and limit != 1) {
       limit = 1;
       # reduce thrust according to SPD and VNAV...
       print("EGT Overlimit");
     }
     setprop("/instrumentation/ecam/egt_limit_arm",0);
     setprop("/instrumentation/ecam/egt_overlimit",limit);
   }
}



check_all_start = func {
  tt = 0;
  for(e=0; e < 4; e=e+1) {
    e_run  = getprop("/engines/engine["~e~"]/running");
    ##e_master = getprop("/controls/engines/engine["~e~"]/master");
    if (e_run == 1) {
      tt = tt+1;
    }
  }
  ##print("there are: "~tt~" engines running");
  if (tt == 4) {
    print("Complete engine start OK");
    setprop("/instrumentation/ecam/page","wheel");
    atnetwork.doReportEngineStart();
  }
}


start_apu = func {
  n2 = getprop("/engines/engine[4]/n2");
  if (n2 > 25 and n2 < 27 and getprop("/controls/engines/engine[4]/cutoff") == 1) {
    setprop("/controls/engines/engine[4]/cutoff",0);
  }
  if (n2 > 25 and n2 < 50) {
    setprop("/controls/engines/engine[4]/ignition",1);
    #setprop("/controls/engines/engine[4]/starter",0);
    #setprop("/controls/engines/engine[4]/bleed",1);
  }
  if (n2 > 50) {
    setprop("/controls/engines/engine[4]/ignition",0);
    ##setprop("/controls/engines/engine[4]/starter",0);
    setprop("/engines/engine[4]/off-start-run",2);
    setprop("/controls/electric/engine[4]/generator", 1);
    setprop("/controls/electric/engine[4]/bus-tie", 1);
    setprop("/controls/electric/APU-generator", 1);
    settimer(update_sd, 10);
  }

}


# TOGGLE REVERSER
togglereverser = func {
  r1 = "/controls/engines/engine[1]"; 
  r2 = "/controls/engines/engine[2]"; 
  rv1 = "/surface-positions/reverser-pos-norm"; 

  val = getprop(rv1);
  if (val == 0 or val == nil) {
    interpolate(rv1, 1.0, 1.4);  
    setprop(r1,"reverser","true");
    setprop(r2,"reverser", "true");
  } else {
    if (val == 1.0){
      interpolate(rv1, 0.0, 1.4);  
      setprop(r1,"reverser",0);
      setprop(r2,"reverser",0);
    }
  }
}

var stepSpeedbrake = func(step) {
    if(props.globals.getNode("/sim/spoilers") != nil) {
        stepProps("/controls/flight/speedbrake", "/sim/spoilers", step);
        return;
    }
    # Hard-coded spoilers movement in 4 equal steps:
    var val = 0.25 * step + getprop("/controls/flight/speedbrake");
    setprop("/controls/flight/speedbrake", val > 1 ? 1 : val < 0 ? 0 : val);
}

toggleExternalServices = func() {
   var extAvail = getprop("/controls/electric/ground/external_1")+getprop("/controls/electric/ground/external_2")+getprop("/controls/electric/ground/external_3")+getprop("/controls/electric/ground/external_4");
   var fltMode = getprop("/instrumentation/ecam/flight-mode");
   var engRun = getprop("/engines/engine[0]/running")+getprop("/engines/engine[1]/running")+getprop("/engines/engine[2]/running")+getprop("/engines/engine[3]/running");
   if (extAvail > 0) {
       extAvail = 0;
       setprop("/controls/electric/contact/external_1", 0);
       setprop("/controls/electric/contact/external_2", 0);
       setprop("/controls/electric/contact/external_3", 0);
       setprop("/controls/electric/contact/external_4", 0);
   } else {
     if ((fltMode == 1 or fltMode == 12) and engRun == 0) {
       extAvail = 1;
     }
   }
   setprop("/controls/electric/ground/external_1", extAvail);
   setprop("/controls/electric/ground/external_2", extAvail);
   setprop("/controls/electric/ground/external_3", extAvail);
   setprop("/controls/electric/ground/external_4", extAvail);
}

## FDM init
setlistener("/sim/signals/fdm-initialized", func {
 update_engines();
 print("General Aircraft Systems Initialized");
});

# monitor eng 0 switch for ignition
setlistener("/controls/engines/engine[0]/master", func(n) {
  master = n.getValue();
  ign = getprop("/controls/engines/ign-start");
  apu = getprop("/engines/engine[4]/off-start-run");  # 2 for run.
  apu_gen = (getprop("/controls/electric/contact/apu_gen-a") == 1) or (getprop("/controls/electric/contact/apu_gen-a") == 2);
  if (master == 1 and ign == 1 and apu == 2 and apu_gen) {
    if (getprop("/instrumentation/ecam/flight-mode") == 1) {
      #print("[ECAM] set SD page: engine");
      setprop("/instrumentation/ecam/flight-mode",2);
    }
    setprop("/controls/engines/engine[0]/starter",1);
  }
  if (master == 0 and ign == 0) {
    setprop("/controls/engines/engine[0]/cutoff",1);
    setprop("/instrumentation/ecam/flight-mode",1);
  }
});

# once we have engine bleed, open air valve
setlistener("/controls/pneumatic/engine[0]/bleed", func(n) {
  bleed = n.getValue();
  if (bleed == 1) {
    setprop("/controls/pressurization/apu/bleed-on",0);
    setprop("/controls/pressurization/engine[0]/bleed-on",1);
  } else {
    setprop("/controls/pressurization/engine[0]/bleed-on",0);
    setprop("/controls/pressurization/pack[0]/pack-on", 0);
  }
});

# monitor eng 1 switch for ignition
setlistener("/controls/engines/engine[1]/master", func(n) {
  master = n.getValue();
  ign = getprop("/controls/engines/ign-start");
  apu = getprop("/engines/engine[4]/off-start-run");  # 2 for run.
  apu_gen = (getprop("/controls/electric/contact/apu_gen-a") == 1) or (getprop("/controls/electric/contact/apu_gen-a") == 2);
  if (master == 1 and ign == 1 and apu == 2 and apu_gen) {
    if (getprop("/instrumentation/ecam/flight-mode") == 1) {
      #print("[ECAM] set SD page: engine");
      setprop("/instrumentation/ecam/flight-mode",2);
    }
    setprop("/controls/engines/engine[1]/starter","true");
    setprop("/controls/pneumatic/engine[1]/bleed",1);
  }
  if (master == 0 and ign == 0) {
    setprop("/controls/engines/engine[1]/cutoff",1);
  }
});

# once we have engine bleed open air valve
setlistener("/controls/pneumatic/engine[1]/bleed", func(n) {
  bleed = n.getValue();
  if (bleed == 1) {
    setprop("/controls/pressurization/apu/bleed-on",0);
    setprop("/controls/pressurization/engine[1]/bleed-on",1);
  } else {
    setprop("/controls/pressurization/engine[1]/bleed-on",0);
    setprop("/controls/pressurization/pack[0]/pack-on", 0);
  }
});

# monitor eng 2 switch for ignition
setlistener("/controls/engines/engine[2]/master", func(n) {
  master = n.getValue();
  ign = getprop("/controls/engines/ign-start");
  apu = getprop("/engines/engine[4]/off-start-run");  # 2 for run.
  apu_gen = (getprop("/controls/electric/contact/apu_gen-a") == 1) or (getprop("/controls/electric/contact/apu_gen-a") == 2);
  if (master == 1 and ign == 1 and apu == 2 and apu_gen) {
    if (getprop("/instrumentation/ecam/flight-mode") == 1) {
      #print("[ECAM] set SD page: engine");
      setprop("/instrumentation/ecam/flight-mode",2);
    }
    setprop("/controls/engines/engine[2]/starter","true");
  }
  if (master == 0 and ign == 0) {
    setprop("/controls/engines/engine[2]/cutoff",1);
    
  }
});
# once we have engine bleed open air valve
setlistener("/controls/pneumatic/engine[2]/bleed", func(n) {
  bleed = n.getValue();
  if (bleed == 1) {
    setprop("/controls/pressurization/apu/bleed-on",0);
    setprop("/controls/pressurization/engine[2]/bleed-on",1);
  } else {
    setprop("/controls/pressurization/engine[2]/bleed-on",0);
    setprop("/controls/pressurization/pack[1]/pack-on", 0);
  }
});

# monitor eng 3 switch for ignition
setlistener("/controls/engines/engine[3]/master", func(n) {
  master = n.getValue();
  ign = getprop("/controls/engines/ign-start");
  apu = getprop("/engines/engine[4]/off-start-run");  # 2 for run.
  apu_gen = (getprop("/controls/electric/contact/apu_gen-a") == 1) or (getprop("/controls/electric/contact/apu_gen-a") == 2);
  flt_mode = getprop("/instrumentation/ecam/flight-mode");
  if (master == 1 and ign == 1 and apu == 2 and apu_gen) {
    if (getprop("/instrumentation/ecam/flight-mode") == 1) {
      #print("[ECAM] set SD page: engine");
      setprop("/instrumentation/ecam/flight-mode",2);
    }
    setprop("/controls/engines/engine[3]/starter","true");
  }
  if (master == 0 and ign == 0) {
    setprop("/controls/engines/engine[3]/cutoff",1);
    if (flt_mode == 11) {
      flt_mode = 12;
      setprop("/instrumentation/ecam/flight-mode",flt_mode);
    }
  }
});
# once we have engine bleed open air valve
setlistener("/controls/pneumatic/engine[3]/bleed", func(n) {
  bleed = n.getValue();
  if (bleed == 1) {
    setprop("/controls/pressurization/apu/bleed-on",0);
    setprop("/controls/pressurization/engine[3]/bleed-on",1);
  } else {
    setprop("/controls/pressurization/engine[3]/bleed-on",0);
    setprop("/controls/pressurization/pack[1]/pack-on", 0);
  }
});


# control APU bleed air to pressurisation
setlistener("/controls/pneumatic/APU-bleed", func(n) {
  bleed = n.getValue();
  if (bleed == 1) {
    setprop("/controls/pressurization/apu/bleed-on",1);
  } else {
    setprop("/controls/pressurization/apu/bleed-on",0);
  }
});


# control HOT-AIR valves from AIR PACKS
setlistener("/controls/pressurization/pack[0]/pack-on", func(n) {
   var pack = n.getValue();
   if (pack == 1) {
     settimer(open_hotair, 1);
     var currBleed = getprop("fdm/jsbsim/propulsion/engine[0]/bleed-factor");
     setprop("fdm/jsbsim/propulsion/engine[0]/bleed-factor", currBleed+0.1);
     currBleed = getprop("fdm/jsbsim/propulsion/engine[1]/bleed-factor");
     setprop("fdm/jsbsim/propulsion/engine[1]/bleed-factor", currBleed+0.1);
   } else {
     setprop("/controls/pressurization/pack[0]/hotair-on",0);
     var currBleed = getprop("fdm/jsbsim/propulsion/engine[0]/bleed-factor");
     if (currBleed > 0) {
       setprop("fdm/jsbsim/propulsion/engine[0]/bleed-factor", currBleed-0.1);
     }
     currBleed = getprop("fdm/jsbsim/propulsion/engine[1]/bleed-factor");
     if (currBleed > 0) {
       setprop("fdm/jsbsim/propulsion/engine[1]/bleed-factor", currBleed-0.1);
     }
   }
});


setlistener("/controls/pressurization/pack[1]/pack-on", func(n) {
   var pack = n.getValue();
   if (pack == 1) {
     settimer(open_hotair, 1);
     var currBleed = getprop("fdm/jsbsim/propulsion/engine[2]/bleed-factor");
     setprop("fdm/jsbsim/propulsion/engine[2]/bleed-factor", currBleed+0.1);
     currBleed = getprop("fdm/jsbsim/propulsion/engine[3]/bleed-factor");
     setprop("fdm/jsbsim/propulsion/engine[3]/bleed-factor", currBleed+0.1);
   } else {
     setprop("/controls/pressurization/pack[1]/hotair-on",0);
     var currBleed = getprop("fdm/jsbsim/propulsion/engine[2]/bleed-factor");
     if (currBleed > 0) {
       setprop("fdm/jsbsim/propulsion/engine[2]/bleed-factor", currBleed-0.1);
     }
     currBleed = getprop("fdm/jsbsim/propulsion/engine[3]/bleed-factor");
     if (currBleed > 0) {
       setprop("fdm/jsbsim/propulsion/engine[3]/bleed-factor", currBleed-0.1);
     }
   }
});

open_hotair = func() {
  if (getprop("/controls/pressurization/pack[0]/pack-on") == 1) {
    setprop("/controls/pressurization/pack[0]/hotair-on",1);
  }
  if (getprop("/controls/pressurization/pack[1]/pack-on") == 1) {
    setprop("/controls/pressurization/pack[1]/hotair-on",1);
  }
}

# APU Controller

setlistener("/controls/APU/master-switch", func(n) {
	apu_master = n.getValue();
	if(apu_master == 0) {
		setprop("/controls/engines/engine[4]/cutoff",1);
	        setprop("/controls/pneumatic/APU-bleed",0);
	        setprop("/engines/engine[4]/off-start-run", 0);
	        setprop("/controls/APU/start", 0);
	}
	apu_start = getprop("/controls/APU/start");
	apu_mode = getprop("/engines/engine[4]/off-start-run");
	if(apu_mode == 0) {
		# OFF
		if(apu_master == 1 and apu_start == 1) {
			setprop("/engines/engine[4]/off-start-run", 1);
		}
	} elsif (apu_mode == 1) {
		# START
		if(apu_start == 0) {
			setprop("/engines/engine[4]/off-start-run", 0);
		}
	}	
});

setlistener("/controls/APU/start", func(n) {
	setprop("/controls/engines/engine[4]/starter",n.getValue());
	setprop("/controls/engines/engine[4]/ignition",n.getValue());
	apu_master = getprop("/controls/APU/master-switch");
	if(apu_master == 0) {
		setprop("/controls/engines/engine[4]/cutoff",1);
	        setprop("/controls/pneumatic/APU-bleed",0);
	        setprop("/engines/engine[4]/off-start-run", 0);
	        setprop("/controls/APU/start", 0);
	}
	apu_start = n.getValue();
	apu_mode = getprop("/engines/engine[4]/off-start-run");
	if(apu_mode == 0) {
		# OFF
		if(apu_master == 1 and apu_start == 1) {
			setprop("/engines/engine[4]/off-start-run", 1);
		}
	} elsif (apu_mode == 1) {
		# START
		if(apu_start == 0) {
			setprop("/engines/engine[4]/off-start-run", 0);
		}
	}
});

setlistener("/controls/switches/seat-belt", func(n) {
  seat = n.getValue();
  ## seat belt switch to off
  if (seat == 0) {
    setprop("/instrumentation/switches/seatbelt-sign",0);
  }
  ## seat belt switch set to auto
  if (seat == 1) {
    if (getprop("/instrumentation/altimeter/indicated-altitude-ft") <10000 ) {
      setprop("/instrumentation/switches/seatbelt-sign",1);
    }
  }
  ## seat belt switch set to on
  if (seat == 2) {
    setprop("/instrumentation/switches/seatbelt-sign",1);
  }
});

# if the ground external power source if removed, we should auto-disconnect connector
setlistener("/controls/electric/ground/external_1", func(n) {
   var connect = n.getValue();
   if (connect == 0 and getprop("/controls/electric/contact/external_1") == 1) {
     setprop("/controls/electric/contact/external_1", 0);
   }
});

setlistener("/controls/electric/ground/external_2", func(n) {
   var connect = n.getValue();
   if (connect == 0 and getprop("/controls/electric/contact/external_2") == 1) {
     setprop("/controls/electric/contact/external_2", 0);
   }
});

setlistener("/controls/electric/ground/external_3", func(n) {
   var connect = n.getValue();
   if (connect == 0 and getprop("/controls/electric/contact/external_3") == 1) {
     setprop("/controls/electric/contact/external_3", 0);
   }
});

setlistener("/controls/electric/ground/external_4", func(n) {
   var connect = n.getValue();
   if (connect == 0 and getprop("/controls/electric/contact/external_4") == 1) {
     setprop("/controls/electric/contact/external_4", 0);
   }
});


setlistener("/controls/anti-ice/engine[0]/inlet-heat", func(n) {
   var anti = 0;
   var currBleed = getprop("fdm/jsbsim/propulsion/engine[0]/bleed-factor");
   var heat = n.getValue();
   if (heat == 0) {
     anti = -0.12;
     if (currBleed == 0) {
       anti = 0.0;
     }
   } else {
     anti = 0.12;
   }
   setprop("fdm/jsbsim/propulsion/engine[0]/bleed-factor", currBleed+anti);
});

setlistener("/controls/anti-ice/engine[1]/inlet-heat", func(n) {
   var anti = 0;
   var currBleed = getprop("fdm/jsbsim/propulsion/engine[1]/bleed-factor");
   if (n.getValue() == 0) {
     anti = -0.12;
     if (currBleed == 0) {
       anti = 0.0;
     }
   } else {
     anti = 0.12;
   }
   setprop("fdm/jsbsim/propulsion/engine[1]/bleed-factor", currBleed+anti);
});

setlistener("/controls/anti-ice/engine[2]/inlet-heat", func(n) {
   var anti = 0;
   var currBleed = getprop("fdm/jsbsim/propulsion/engine[2]/bleed-factor");
   if (n.getValue() == 0) {
     anti = -0.12;
     if (currBleed == 0) {
       anti = 0.0;
     }
   } else {
     anti = 0.12;
   }
   setprop("fdm/jsbsim/propulsion/engine[2]/bleed-factor", currBleed+anti);
});

setlistener("/controls/anti-ice/engine[3]/inlet-heat", func(n) {
   var anti = 0;
   var currBleed = getprop("fdm/jsbsim/propulsion/engine[3]/bleed-factor");
   if (n.getValue() == 0) {
     anti = -0.12;
     if (currBleed == 0) {
       anti = 0.0;
     }
   } else {
     anti = 0.12;
   }
   setprop("fdm/jsbsim/propulsion/engine[3]/bleed-factor", currBleed+anti);
});

setlistener("sim/signals/fdm-initialized", func {
	setprop("/controls/electric/contact/engine_1", 0);
	setprop("/controls/electric/contact/engine_2", 0);
	setprop("/controls/electric/contact/engine_3", 0);
	setprop("/controls/electric/contact/engine_4", 0);
	setprop("/controls/electric/contact/apu_gen-a", 0);
	setprop("/controls/electric/contact/apu_gen-b", 0);
	setprop("/controls/electric/contact/batt_1", 0);
	setprop("/controls/electric/contact/batt_2", 0);
});

settimer(init_controls, 0);
